import mockData from "../mocks/mockData.json"; // Import des donn√©es mock√©es
import { USE_MOCK_DATA, API_BASE_URL } from "../config"; // Configuration

console.log(`üõ†Ô∏è Mode MockData activ√© : ${USE_MOCK_DATA}`);

/**
 * R√©cup√®re tous les utilisateurs (API ou Mock)
 * @returns {Promise<Array>}
 */
export const getAllUsers = async () => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des utilisateurs mock√©s...");
        return Promise.resolve(mockData.users || []);  // Retourne les utilisateurs mock√©s
    }

    try {
        // V√©rification de l'URL pour l'API backend
        console.log(`üì° Tentative de r√©cup√©ration des utilisateurs depuis ${API_BASE_URL}/users`);

        // Exemple d'IDs utilisateurs que l'on r√©cup√®re depuis l'API
        const userIds = [12, 18]; // Si le backend expose plusieurs utilisateurs par ID
        const userRequests = userIds.map((id) =>
            fetch(`${API_BASE_URL}/user/${id}`)
                .then((res) => {
                    if (!res.ok) {
                        console.error(`‚ùå Erreur API ${res.status}: ${res.statusText}`);
                        return null; // Si la requ√™te √©choue, retourne null
                    }
                    return res.json();
                })
        );

        // Attente des r√©sultats de toutes les requ√™tes
        const users = await Promise.all(userRequests);
        return users.filter((user) => user !== null); // Retourne les utilisateurs valides
    } catch (error) {
        console.error("‚ùå Erreur API ou r√©cup√©ration de donn√©es utilisateur √©chou√©e. Passage aux donn√©es mock√©es.");
        console.error(error); // Affiche l'erreur compl√®te pour le debug
        return mockData.users; // Retourne les donn√©es mock√©es en cas d'erreur d'API
    }
};

/**
 * R√©cup√®re les informations d'un utilisateur (API ou Mock)
 * @param {string} userId
 * @returns {Promise<Object>}
 */
export const getUserData = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des donn√©es mock√©es...");
        return Promise.resolve(
            mockData.users.find(user => user.id === Number(userId)) || null
        );  // Recherche d'un utilisateur dans les donn√©es mock√©es
    }

    try {
        console.log(`üì° Tentative de r√©cup√©ration des donn√©es utilisateur: ${API_BASE_URL}/user/${userId}`);
        const response = await fetch(`${API_BASE_URL}/user/${userId}`);

        if (!response.ok) throw new Error(`Erreur lors de la r√©cup√©ration des donn√©es de l'utilisateur ${userId}`);

        const userData = await response.json();
        return userData;  // Retourne les donn√©es utilisateur
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return null;
    }
};

/**
 * R√©cup√®re l'activit√© quotidienne d'un utilisateur (API ou Mock)
 * @param {string} userId
 * @returns {Promise<Array>}
 */
export const getUserActivity = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des donn√©es mock√©es pour l'activit√©...");
        return Promise.resolve(
            mockData.activity.find(activity => activity.userId === Number(userId))?.sessions || []
        );  // Recherche des sessions dans les donn√©es mock√©es
    }

    try {
        console.log(`üì° R√©cup√©ration de l'activit√© utilisateur depuis l'API: ${API_BASE_URL}/user/${userId}/activity`);
        const response = await fetch(`${API_BASE_URL}/user/${userId}/activity`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration de l'activit√©");

        return await response.json();  // Retourne les donn√©es d'activit√©
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return [];
    }
};

/**
 * R√©cup√®re les performances d'un utilisateur (API ou Mock)
 * @param {string} userId
 * @returns {Promise<Object>}
 */
export const getUserPerformance = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des donn√©es mock√©es pour la performance...");
        return Promise.resolve(
            mockData.performance.find(performance => performance.userId === Number(userId)) || null
        );  // Recherche des performances dans les donn√©es mock√©es
    }

    try {
        console.log(`üì° R√©cup√©ration des performances utilisateur depuis l'API: ${API_BASE_URL}/user/${userId}/performance`);
        const response = await fetch(`${API_BASE_URL}/user/${userId}/performance`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration des performances");

        return await response.json();  // Retourne les donn√©es de performance
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return null;
    }
};

/**
 * R√©cup√®re les sessions moyennes d'un utilisateur (API ou Mock)
 * @param {string} userId
 * @returns {Promise<Array>}
 */
export const getUserAverageSessions = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des sessions mock√©es...");
        return Promise.resolve(
            mockData.averageSessions.find(session => session.userId === Number(userId))?.sessions || []
        );  // Recherche des sessions dans les donn√©es mock√©es
    }

    try {
        console.log(`üì° R√©cup√©ration des sessions utilisateur depuis l'API: ${API_BASE_URL}/user/${userId}/average-sessions`);
        const response = await fetch(`${API_BASE_URL}/user/${userId}/average-sessions`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration des sessions");

        return await response.json();  // Retourne les donn√©es des sessions moyennes
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return [];
    }
};
