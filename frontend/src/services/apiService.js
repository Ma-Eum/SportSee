import mockData from "../mocks/mockData.json"; // Import du mock
import { USE_MOCK_DATA, API_BASE_URL } from "../config"; // Configuration

/**
 * R√©cup√®re tous les utilisateurs (API ou Mock)
 * @returns {Promise<Array>}
 */
export const getAllUsers = async () => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des utilisateurs mock√©s...");
        return Promise.resolve(mockData.users || []);
    }

    try {
        console.log("üîÑ R√©cup√©ration des utilisateurs depuis l'API...");
        const response = await fetch(`${API_BASE_URL}/users`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration des utilisateurs");
        return await response.json();
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return [];
    }
};

/**
 * R√©cup√®re les informations d'un utilisateur (API ou Mock)
 * @param {string} userId 
 * @returns {Promise<Object>}
 */
export const getUserData = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des donn√©es mock√©es...");
        return Promise.resolve(
            mockData.users.find(user => user.id === Number(userId)) || null
        );
    }

    try {
        console.log("üîÑ R√©cup√©ration des donn√©es depuis l'API...");
        const response = await fetch(`${API_BASE_URL}/user/${userId}`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration des donn√©es");
        return await response.json();
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return null;
    }
};

/**
 * R√©cup√®re l'activit√© quotidienne d'un utilisateur (API ou Mock)
 * @param {string} userId 
 * @returns {Promise<Array>}
 */
export const getUserActivity = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des donn√©es mock√©es pour l'activit√©...");
        return Promise.resolve(
            mockData.activity.find(activity => activity.userId === Number(userId))?.sessions || []
        );
    }

    try {
        console.log("üîÑ R√©cup√©ration de l'activit√© depuis l'API...");
        const response = await fetch(`${API_BASE_URL}/user/${userId}/activity`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration de l'activit√©");
        return await response.json();
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return [];
    }
};

/**
 * R√©cup√®re les performances d'un utilisateur (API ou Mock)
 * @param {string} userId 
 * @returns {Promise<Object>}
 */
export const getUserPerformance = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des donn√©es mock√©es pour la performance...");
        return Promise.resolve(
            mockData.performance.find(performance => performance.userId === Number(userId)) || null
        );
    }

    try {
        console.log("üîÑ R√©cup√©ration des performances depuis l'API...");
        const response = await fetch(`${API_BASE_URL}/user/${userId}/performance`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration des performances");
        return await response.json();
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return null;
    }
};

/**
 * R√©cup√®re les sessions moyennes d'un utilisateur (API ou Mock)
 * @param {string} userId 
 * @returns {Promise<Array>}
 */
export const getUserAverageSessions = async (userId) => {
    if (USE_MOCK_DATA) {
        console.log("üîÑ Utilisation des sessions mock√©es...");
        return Promise.resolve(
            mockData.averageSessions.find(session => session.userId === Number(userId))?.sessions || []
        );
    }

    try {
        console.log("üîÑ R√©cup√©ration des sessions depuis l'API...");
        const response = await fetch(`${API_BASE_URL}/user/${userId}/average-sessions`);
        if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration des sessions");
        return await response.json();
    } catch (error) {
        console.error("‚ùå Erreur API :", error);
        return [];
    }
};
